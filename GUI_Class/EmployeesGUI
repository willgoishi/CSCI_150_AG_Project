from tkinter import *
import sqlite3
from EmployeeDB import EmployeesDatabase
from EmployeeClass import Employee


def runEmployeeClass(root):
    Employees(root)


class Employees(Frame):
    employeesDB = EmployeesDatabase()

    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.place()
        self.createButtons()
        self.master.title("Employees")

    # Creates the buttons for the first window
    def createButtons(self):
        addEmployee = Button(root, text="Add Employee", command = lambda: self.sequence(self.addEmployee)) # Add Employee Button, Incomplete
        addEmployee.place(x = 110, y = 100)

        currentEmployeesButton = Button(root, text="View Current Employees")  # Button to view current Employees, Inc
        currentEmployeesButton.place(x = 110, y = 140)

        backButton = Button(root, text="Back")  # This button will take the user back to the last window, Incomplete
        backButton.place(x = 110, y = 180)

    # Creates the addEmployee Button and Entries when you select addEmployee
    def addEmployee(self):
        self.master.title("Add new Employee")  # Title Change to Add New Employee
        employeeName = Label(root, text="Name of Employee: ") # Label for the Name of Employee entry
        employeeName.place(x = 110, y = 30)
        self.name = Entry(root, bd=5)  # Where the user will input employee name
        self.name.place(x = 110, y = 60)
        employeeNumber = Label(root, text="Phone Number of Employee: ")
        employeeNumber.place(x = 110, y = 110)
        self.number = Entry(root, bd=5)
        self.number.place(x = 110, y = 140)
        employeeEmail = Label(root, text="Email of Employee: ") # Label for the Email Entry
        employeeEmail.place(x = 110, y = 190)
        self.email = Entry(root, bd=5)
        self.email.place(x = 110, y = 210)
        employeePosition = Label(root, text="Position of Employee: ") # Label for the Position Entry
        employeePosition.place(x = 110, y = 260)
        self.position = Entry(root, bd=5)
        self.position.place(x = 110, y = 290)
        employeeSalary = Label(root, text="Salary of Emploee: ") # Label for the Salary Entry
        employeeSalary.place(x = 110, y = 340)
        self.salary = Entry(root, bd=5)
        self.salary.place(x = 110, y = 370)
        # Back button
        backButton = Button(root, text="Back", command=lambda: self.sequence(self.createButtons))
        backButton.place(x = 110, y = 420)
        # Save button
        saveButton = Button(root, text="Save Employee", command= self.saveEmployeeData)
        saveButton.place(x = 187, y = 420)

    def saveEmployeeData(self):
        self.employeeName = self.name.get()
        self.employeeNumber = self.number.get()
        self.employeeEmail = self.email.get()
        self.employeePosition = self.position.get()
        self.employeeSalary = self.salary.get()
        self.sequence(self.confirmation)

    def confirmation(self):
        nameLabel = Label(root,text="%s" % self.employeeName)
        nameLabel.place(x = 110, y = 30)
        numberLabel = Label(root, text="%s" % self.employeeNumber)
        numberLabel.place(x = 110, y = 60)
        emailLabel = Label(root, text="%s" % self.employeeEmail)
        emailLabel.place(x = 110, y = 90)
        positionLabel = Label(root, text="%s" % self.employeePosition)
        positionLabel.place(x = 110, y = 120)
        salaryLabel = Label(root, text="%s" % self.employeeSalary)
        salaryLabel.place(x = 110, y = 150)
        backButton = Button(root, text="Back", command = lambda: self.sequence(self.addEmployee))
        backButton.place(x = 110, y = 200)
        confirmButton = Button(root, text="Confirm", command = self.confirmationSave)
        confirmButton.place(x = 187, y = 200)

    def confirmationSave(self):
        newEmployee = Employee(self.employeeName)
        newEmployee.number = self.employeeNumber
        newEmployee.email = self.employeeEmail
        newEmployee.position = self.employeePosition
        newEmployee.salary = self.employeeSalary
        #EmployeesDatabase.createTable(self)
        EmployeesDatabase.insertToTable(self,newEmployee)
        print ("Save Successful")
        print (EmployeesDatabase.retrieve_data(self))

    # This is a helper function that will delete the current widgets of the frame
    def sequence(self, run):
        for child in root.winfo_children():
            child.destroy()
        run()


root = Tk()
root.geometry("500x500")
employees = Employees(root)
employees.mainloop()

